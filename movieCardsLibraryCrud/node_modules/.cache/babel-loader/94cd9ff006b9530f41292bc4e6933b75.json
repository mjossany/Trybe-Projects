{"ast":null,"code":"import data from './movieData';\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = movies => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK'; // --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = response => callback => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => new Promise(resolve => {\n  const movies = readMovies();\n  simulateRequest(movies)(resolve);\n});\nexport const getMovie = movieId => {\n  const movie = readMovies().find(mov => mov.id === parseInt(movieId, 10));\n  return new Promise(resolve => {\n    simulateRequest(movie)(resolve);\n  });\n};\nexport const updateMovie = updatedMovie => new Promise(resolve => {\n  const movies = readMovies().map(movie => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie,\n        ...updatedMovie\n      };\n    }\n\n    return movie;\n  });\n  saveMovies(movies);\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});\nexport const createMovie = movieData => new Promise(resolve => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData,\n    id: nextId\n  };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n  simulateRequest(SUCCESS_STATUS)(resolve);\n});\nexport const deleteMovie = movieId => {\n  let movies = readMovies();\n  movies = movies.filter(movie => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n  return new Promise(resolve => {\n    simulateRequest({\n      status: SUCCESS_STATUS\n    })(resolve);\n  });\n};","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/movieCardsLibraryCrud/sd-012-project-movie-card-library-crud/src/services/movieAPI.js"],"names":["data","localStorage","setItem","JSON","stringify","readMovies","parse","getItem","saveMovies","movies","TIMEOUT","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","movie","find","mov","id","parseInt","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status"],"mappings":"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","sourcesContent":["import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}