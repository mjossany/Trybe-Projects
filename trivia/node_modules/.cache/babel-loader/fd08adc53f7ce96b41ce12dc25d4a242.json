{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/components/Question/QuestionAnswers.js\";\nimport React, { Component } from 'react';\nimport { string, arrayOf, bool, func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport randomize from '../../functions/randomize'; // import correctFalseAnswer from '../../functions/correctFalseAnswer';\n\nimport { setAnsweredTrueCorrect, setAnsweredTrueIncorrect } from '../../actions';\n\nclass QuestionAnswers extends Component {\n  render() {\n    const _this$props = this.props,\n          correctAnswer = _this$props.correctAnswer,\n          wrongAnswers = _this$props.wrongAnswers,\n          answered = _this$props.answered,\n          answeredTrueCorrect = _this$props.answeredTrueCorrect,\n          answeredTrueIncorrect = _this$props.answeredTrueIncorrect;\n    const allAnswers = [...wrongAnswers.map((answer, index) => ({\n      correct: false,\n      answer,\n      index,\n      isCorrect: 'wrong-answer'\n    })), {\n      correct: true,\n      answer: correctAnswer,\n      isCorrect: 'correct-answer'\n    }];\n    const randomIndex = randomize(allAnswers.length, allAnswers.length - 1);\n    return React.createElement(\"div\", {\n      className: \"buttons-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"buttons-answerers-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, randomIndex.map(number => {\n      const _allAnswers$number = allAnswers[number],\n            correct = _allAnswers$number.correct,\n            answer = _allAnswers$number.answer,\n            i = _allAnswers$number.index,\n            isCorrect = _allAnswers$number.isCorrect;\n      return React.createElement(\"div\", {\n        key: answer,\n        className: \"buttons-answerers\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        key: answer,\n        \"data-testid\": correct ? 'correct-answer' : `wrong-answer-${i}`,\n        disabled: answered,\n        onClick: correct ? answeredTrueCorrect : answeredTrueIncorrect,\n        className: answered ? isCorrect : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, answer));\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  answeredTrueCorrect: () => dispatch(setAnsweredTrueCorrect()),\n  answeredTrueIncorrect: () => dispatch(setAnsweredTrueIncorrect())\n});\n\nconst mapStateToProps = ({\n  questions\n}) => ({\n  answered: questions.answered\n});\n\nQuestionAnswers.propTypes = {\n  correctAnswer: string.isRequired,\n  wrongAnswers: arrayOf(string).isRequired,\n  answered: bool.isRequired,\n  answeredTrueCorrect: func.isRequired,\n  answeredTrueIncorrect: func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionAnswers);","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/components/Question/QuestionAnswers.js"],"names":["React","Component","string","arrayOf","bool","func","connect","randomize","setAnsweredTrueCorrect","setAnsweredTrueIncorrect","QuestionAnswers","render","props","correctAnswer","wrongAnswers","answered","answeredTrueCorrect","answeredTrueIncorrect","allAnswers","map","answer","index","correct","isCorrect","randomIndex","length","number","i","mapDispatchToProps","dispatch","mapStateToProps","questions","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, arrayOf, bool, func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport randomize from '../../functions/randomize';\n// import correctFalseAnswer from '../../functions/correctFalseAnswer';\nimport { setAnsweredTrueCorrect, setAnsweredTrueIncorrect } from '../../actions';\n\nclass QuestionAnswers extends Component {\n  render() {\n    const {\n      correctAnswer,\n      wrongAnswers,\n      answered,\n      answeredTrueCorrect,\n      answeredTrueIncorrect } = this.props;\n    const allAnswers = [...wrongAnswers\n      .map((answer, index) => ({\n        correct: false, answer, index, isCorrect: 'wrong-answer',\n      })),\n    { correct: true, answer: correctAnswer, isCorrect: 'correct-answer' },\n    ];\n    const randomIndex = randomize(allAnswers.length, allAnswers.length - 1);\n    return (\n      <div className=\"buttons-container\">\n        <div className=\"buttons-answerers-container\">\n          <div>\n            {randomIndex.map((number) => {\n              const { correct, answer, index: i, isCorrect } = allAnswers[number];\n              return (\n                <div key={ answer } className=\"buttons-answerers\">\n                  <button\n                    type=\"button\"\n                    key={ answer }\n                    data-testid={ correct ? 'correct-answer' : `wrong-answer-${i}` }\n                    disabled={ answered }\n                    onClick={ correct ? answeredTrueCorrect : answeredTrueIncorrect }\n                    className={ answered ? isCorrect : '' }\n                  >\n                    {answer}\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  answeredTrueCorrect: () => dispatch(setAnsweredTrueCorrect()),\n  answeredTrueIncorrect: () => dispatch(setAnsweredTrueIncorrect()),\n});\n\nconst mapStateToProps = ({ questions }) => ({\n  answered: questions.answered,\n});\n\nQuestionAnswers.propTypes = {\n  correctAnswer: string.isRequired,\n  wrongAnswers: arrayOf(string).isRequired,\n  answered: bool.isRequired,\n  answeredTrueCorrect: func.isRequired,\n  answeredTrueIncorrect: func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionAnswers);\n"]},"metadata":{},"sourceType":"module"}