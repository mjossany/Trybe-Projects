{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/LoginScreen.js\";\nimport React, { Component } from 'react';\nimport { func, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport NameInput from '../components/LoginScreen/NameInput';\nimport EmailInput from '../components/LoginScreen/EmailInput';\nimport ButtonPlay from '../components/LoginScreen/ButtonPlay';\nimport logo from '../trivia.png';\nimport '../App.css';\nimport ButtonSettings from '../components/LoginScreen/ButtonSettings';\nimport { storagePlayerInfo } from '../actions/index';\nimport fetchToken from '../fetchs/fetchToken';\nimport saveInfoLocalStorage from '../functions/saveInfoLocalStorage';\n\nclass LoginScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      disabled: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validateEmailAndName = this.validateEmailAndName.bind(this);\n    this.getToken = this.getToken.bind(this);\n  }\n\n  componentDidMount() {\n    const getToken = this.props.getToken;\n    getToken();\n  }\n\n  async getToken() {\n    const state = this.state;\n    const name = state.name,\n          email = state.email;\n    const _this$props = this.props,\n          storePlayerInfo = _this$props.storePlayerInfo,\n          token = _this$props.token;\n    const tokenStringfy = JSON.stringify(token);\n    localStorage.setItem('token', tokenStringfy);\n    storePlayerInfo(state);\n    saveInfoLocalStorage(name, email);\n  }\n\n  handleChange({\n    target\n  }) {\n    const name = target.name,\n          value = target.value;\n    this.setState({\n      [name]: value\n    }, () => this.validateEmailAndName());\n  }\n\n  validateEmailAndName() {\n    const _this$state = this.state,\n          email = _this$state.email,\n          name = _this$state.name;\n    const re = /\\w+@\\w+.com/.test(email);\n    const minimumNameLength = 2;\n    const validName = name.length >= minimumNameLength;\n    const logicValidation = re && validName;\n    this.setState({\n      disabled: !logicValidation\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          disabled = _this$state2.disabled,\n          email = _this$state2.email,\n          name = _this$state2.name;\n    return React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"your-turn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Your Turn!\"), React.createElement(NameInput, {\n      onChange: this.handleChange,\n      value: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(EmailInput, {\n      onChange: this.handleChange,\n      value: email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"btns-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(ButtonPlay, {\n      isDisabled: disabled,\n      storeFunc: this.getToken,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(ButtonSettings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nLoginScreen.propTypes = {\n  storePlayerInfo: func.isRequired,\n  getToken: func.isRequired,\n  token: string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  token: state.token.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  storePlayerInfo: data => dispatch(storagePlayerInfo(data)),\n  getToken: () => dispatch(fetchToken())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/LoginScreen.js"],"names":["React","Component","func","string","connect","NameInput","EmailInput","ButtonPlay","logo","ButtonSettings","storagePlayerInfo","fetchToken","saveInfoLocalStorage","LoginScreen","constructor","props","state","name","email","disabled","handleChange","bind","validateEmailAndName","getToken","componentDidMount","storePlayerInfo","token","tokenStringfy","JSON","stringify","localStorage","setItem","target","value","setState","re","test","minimumNameLength","validName","length","logicValidation","render","propTypes","isRequired","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { func, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport NameInput from '../components/LoginScreen/NameInput';\nimport EmailInput from '../components/LoginScreen/EmailInput';\nimport ButtonPlay from '../components/LoginScreen/ButtonPlay';\nimport logo from '../trivia.png';\nimport '../App.css';\nimport ButtonSettings from '../components/LoginScreen/ButtonSettings';\nimport { storagePlayerInfo } from '../actions/index';\nimport fetchToken from '../fetchs/fetchToken';\nimport saveInfoLocalStorage from '../functions/saveInfoLocalStorage';\n\nclass LoginScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      disabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validateEmailAndName = this.validateEmailAndName.bind(this);\n    this.getToken = this.getToken.bind(this);\n  }\n\n  componentDidMount() {\n    const { getToken } = this.props;\n    getToken();\n  }\n\n  async getToken() {\n    const { state } = this;\n    const { name, email } = state;\n    const { storePlayerInfo, token } = this.props;\n    const tokenStringfy = JSON.stringify(token);\n    localStorage.setItem('token', tokenStringfy);\n    storePlayerInfo(state);\n    saveInfoLocalStorage(name, email);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.validateEmailAndName());\n  }\n\n  validateEmailAndName() {\n    const { email, name } = this.state;\n    const re = /\\w+@\\w+.com/.test(email);\n    const minimumNameLength = 2;\n    const validName = name.length >= minimumNameLength;\n    const logicValidation = re && validName;\n    this.setState({\n      disabled: !logicValidation,\n    });\n  }\n\n  render() {\n    const { disabled, email, name } = this.state;\n    return (\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <h1\n          className=\"your-turn\"\n        >\n          Your Turn!\n        </h1>\n        <NameInput\n          onChange={ this.handleChange }\n          value={ name }\n        />\n        <EmailInput\n          onChange={ this.handleChange }\n          value={ email }\n        />\n        <div\n          className=\"btns-container\"\n        >\n          <ButtonPlay\n            isDisabled={ disabled }\n            storeFunc={ this.getToken }\n          />\n          <ButtonSettings />\n        </div>\n      </header>\n    );\n  }\n}\n\nLoginScreen.propTypes = {\n  storePlayerInfo: func.isRequired,\n  getToken: func.isRequired,\n  token: string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  storePlayerInfo: (data) => dispatch(storagePlayerInfo(data)),\n  getToken: () => dispatch(fetchToken()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);\n"]},"metadata":{},"sourceType":"module"}