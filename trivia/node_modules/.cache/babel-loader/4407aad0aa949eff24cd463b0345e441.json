{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/GameScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { func, arrayOf, objectOf, bool, number, string } from 'prop-types';\nimport Header from '../components/Header/Header';\nimport fetchQuestions from '../fetchs/fetchQuestions';\nimport QuestionCategory from '../components/Question/QuestionCategory';\nimport QuestionText from '../components/Question/QuestionText';\nimport QuestionAnswers from '../components/Question/QuestionAnswers';\nimport { setAnsweredTrueIncorrect, setStoreScore } from '../actions';\nimport calculateScore from '../functions/calculateScore';\n\nclass GameScreen extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30\n    };\n    this.countdown = this.countdown.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const dispatchQuestions = this.props.dispatchQuestions;\n    dispatchQuestions();\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    const state = this.state;\n    const timer = this.state.timer;\n    const getQuestionsDifficulty = this.props.getQuestionsDifficulty;\n    const _this$props = this.props,\n          answered = _this$props.answered,\n          answeredTrueIncorrect = _this$props.answeredTrueIncorrect,\n          storeScore = _this$props.storeScore;\n\n    if (answered === true) {\n      clearInterval(this.interval);\n      const score = calculateScore(timer, getQuestionsDifficulty);\n      console.log(score);\n      storeScore(score);\n    }\n\n    if (state.timer === 0) {\n      clearInterval(this.interval);\n      answeredTrueIncorrect();\n    }\n  }\n\n  countdown() {\n    const timer = this.state.timer;\n    this.setState({\n      timer: timer - 1\n    });\n  }\n\n  startTimer() {\n    const timer = this.state.timer;\n    const start = 30;\n\n    if (timer !== start) {\n      this.setState({\n        timer: 30\n      });\n    }\n\n    const setTimer = 1000;\n    this.interval = setInterval(this.countdown, setTimer);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          getQuestions = _this$props2.getQuestions,\n          getLoading = _this$props2.getLoading,\n          getQuestionNumber = _this$props2.getQuestionNumber;\n    const timer = this.state.timer;\n    if (getLoading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Loading...\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Header, {\n      timer: timer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(QuestionCategory, {\n      category: getQuestions[getQuestionNumber].category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(QuestionText, {\n      question: getQuestions[getQuestionNumber].question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(QuestionAnswers, {\n      startTimer: this.startTimer,\n      type: getQuestions[getQuestionNumber].type,\n      correctAnswer: getQuestions[getQuestionNumber].correct_answer,\n      wrongAnswers: getQuestions[getQuestionNumber].incorrect_answers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispathToProps = dispatch => ({\n  dispatchQuestions: questions => dispatch(fetchQuestions(questions)),\n  answeredTrueIncorrect: () => dispatch(setAnsweredTrueIncorrect()),\n  storeScore: score => dispatch(setStoreScore(score))\n});\n\nconst mapStateToProps = ({\n  questions\n}) => ({\n  getQuestions: questions.questions,\n  getQuestionsDifficulty: questions.difficulty,\n  getLoading: questions.loading,\n  getQuestionNumber: questions.questionNumber,\n  answered: questions.answered\n});\n\nGameScreen.propTypes = {\n  dispatchQuestions: func.isRequired,\n  getQuestions: arrayOf(objectOf).isRequired,\n  getLoading: bool.isRequired,\n  getQuestionNumber: number.isRequired,\n  answered: bool.isRequired,\n  answeredTrueIncorrect: func.isRequired,\n  storeScore: func.isRequired,\n  getQuestionsDifficulty: string.isRequired\n};\nexport default connect(mapStateToProps, mapDispathToProps)(GameScreen);","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/GameScreen.js"],"names":["React","Component","connect","func","arrayOf","objectOf","bool","number","string","Header","fetchQuestions","QuestionCategory","QuestionText","QuestionAnswers","setAnsweredTrueIncorrect","setStoreScore","calculateScore","GameScreen","constructor","state","timer","countdown","bind","startTimer","componentDidMount","dispatchQuestions","props","componentDidUpdate","getQuestionsDifficulty","answered","answeredTrueIncorrect","storeScore","clearInterval","interval","score","console","log","setState","start","setTimer","setInterval","render","getQuestions","getLoading","getQuestionNumber","category","question","type","correct_answer","incorrect_answers","mapDispathToProps","dispatch","questions","mapStateToProps","difficulty","loading","questionNumber","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { func, arrayOf, objectOf, bool, number, string } from 'prop-types';\nimport Header from '../components/Header/Header';\nimport fetchQuestions from '../fetchs/fetchQuestions';\nimport QuestionCategory from '../components/Question/QuestionCategory';\nimport QuestionText from '../components/Question/QuestionText';\nimport QuestionAnswers from '../components/Question/QuestionAnswers';\nimport { setAnsweredTrueIncorrect, setStoreScore } from '../actions';\nimport calculateScore from '../functions/calculateScore';\n\nclass GameScreen extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30,\n    };\n\n    this.countdown = this.countdown.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const { dispatchQuestions } = this.props;\n    dispatchQuestions();\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    const { state } = this;\n    const { timer } = this.state;\n    const { getQuestionsDifficulty } = this.props;\n    const { answered, answeredTrueIncorrect, storeScore } = this.props;\n    if (answered === true) {\n      clearInterval(this.interval);\n      const score = calculateScore(timer, getQuestionsDifficulty);\n      console.log(score);\n      storeScore(score);\n    }\n    if (state.timer === 0) {\n      clearInterval(this.interval);\n      answeredTrueIncorrect();\n    }\n  }\n\n  countdown() {\n    const { timer } = this.state;\n    this.setState({\n      timer: timer - 1,\n    });\n  }\n\n  startTimer() {\n    const { timer } = this.state;\n    const start = 30;\n    if (timer !== start) {\n      this.setState({\n        timer: 30,\n      });\n    }\n    const setTimer = 1000;\n    this.interval = setInterval(this.countdown, setTimer);\n  }\n\n  render() {\n    const { getQuestions, getLoading, getQuestionNumber } = this.props;\n    const { timer } = this.state;\n    if (getLoading) return <p>Loading...</p>;\n    return (\n      <div>\n        <Header timer={ timer } />\n        <QuestionCategory\n          category={ getQuestions[getQuestionNumber].category }\n        />\n        <QuestionText\n          question={ getQuestions[getQuestionNumber].question }\n        />\n        <QuestionAnswers\n          startTimer={ this.startTimer }\n          type={ getQuestions[getQuestionNumber].type }\n          correctAnswer={ getQuestions[getQuestionNumber].correct_answer }\n          wrongAnswers={ getQuestions[getQuestionNumber].incorrect_answers }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispathToProps = (dispatch) => ({\n  dispatchQuestions: (questions) => (dispatch(fetchQuestions(questions))),\n  answeredTrueIncorrect: () => dispatch(setAnsweredTrueIncorrect()),\n  storeScore: (score) => dispatch(setStoreScore(score)),\n});\n\nconst mapStateToProps = ({ questions }) => ({\n  getQuestions: questions.questions,\n  getQuestionsDifficulty: questions.difficulty,\n  getLoading: questions.loading,\n  getQuestionNumber: questions.questionNumber,\n  answered: questions.answered,\n});\n\nGameScreen.propTypes = {\n  dispatchQuestions: func.isRequired,\n  getQuestions: arrayOf(objectOf).isRequired,\n  getLoading: bool.isRequired,\n  getQuestionNumber: number.isRequired,\n  answered: bool.isRequired,\n  answeredTrueIncorrect: func.isRequired,\n  storeScore: func.isRequired,\n  getQuestionsDifficulty: string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(GameScreen);\n"]},"metadata":{},"sourceType":"module"}