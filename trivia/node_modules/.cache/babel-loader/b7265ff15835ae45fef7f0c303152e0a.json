{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/GameScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { func, arrayOf, objectOf, bool, number } from 'prop-types';\nimport Header from '../components/Header/Header';\nimport fetchQuestions from '../fetchs/fetchQuestions';\nimport QuestionCategory from '../components/Question/QuestionCategory';\nimport QuestionText from '../components/Question/QuestionText';\nimport QuestionAnswers from '../components/Question/QuestionAnswers';\nimport { setAnsweredTrue } from '../actions';\n\nclass GameScreen extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30\n    };\n    this.countdown = this.countdown.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const dispatchQuestions = this.props.dispatchQuestions;\n    dispatchQuestions();\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    // const { state } = this;\n    const numb = 0;\n    const answered = this.props.answered;\n    if (answered === true) clearInterval(this.interval);\n    console.log(numb + 1); // if (state.timer === 0) {\n    //   clearInterval(this.interval);\n    //   answeredTrue();\n  }\n\n  countdown() {\n    const state = this.state;\n    const timer = this.state.timer;\n    const answeredTrue = this.props.answeredTrue;\n\n    if (state.timer === 1) {\n      clearInterval(this.interval);\n      answeredTrue();\n    }\n\n    this.setState({\n      timer: timer - 1\n    });\n  }\n\n  startTimer() {\n    const timer = this.state.timer;\n    const start = 30;\n\n    if (timer !== start) {\n      this.setState({\n        timer: 30\n      });\n    }\n\n    const setTimer = 1000;\n    this.interval = setInterval(this.countdown, setTimer);\n  }\n\n  render() {\n    const _this$props = this.props,\n          getQuestions = _this$props.getQuestions,\n          getLoading = _this$props.getLoading,\n          getQuestionNumber = _this$props.getQuestionNumber;\n    const timer = this.state.timer;\n    if (getLoading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Loading...\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Header, {\n      timer: timer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(QuestionCategory, {\n      category: getQuestions[getQuestionNumber].category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(QuestionText, {\n      question: getQuestions[getQuestionNumber].question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(QuestionAnswers, {\n      startTimer: this.startTimer,\n      type: getQuestions[getQuestionNumber].type,\n      correctAnswer: getQuestions[getQuestionNumber].correct_answer,\n      wrongAnswers: getQuestions[getQuestionNumber].incorrect_answers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispathToProps = dispatch => ({\n  dispatchQuestions: questions => dispatch(fetchQuestions(questions)),\n  answeredTrue: () => dispatch(setAnsweredTrue())\n});\n\nconst mapStateToProps = ({\n  questions\n}) => ({\n  getQuestions: questions.questions,\n  getLoading: questions.loading,\n  getQuestionNumber: questions.questionNumber,\n  answered: questions.answered\n});\n\nGameScreen.propTypes = {\n  dispatchQuestions: func.isRequired,\n  getQuestions: arrayOf(objectOf).isRequired,\n  getLoading: bool.isRequired,\n  getQuestionNumber: number.isRequired,\n  answered: bool.isRequired,\n  answeredTrue: func.isRequired\n};\nexport default connect(mapStateToProps, mapDispathToProps)(GameScreen);","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/GameScreen.js"],"names":["React","Component","connect","func","arrayOf","objectOf","bool","number","Header","fetchQuestions","QuestionCategory","QuestionText","QuestionAnswers","setAnsweredTrue","GameScreen","constructor","state","timer","countdown","bind","startTimer","componentDidMount","dispatchQuestions","props","componentDidUpdate","numb","answered","clearInterval","interval","console","log","answeredTrue","setState","start","setTimer","setInterval","render","getQuestions","getLoading","getQuestionNumber","category","question","type","correct_answer","incorrect_answers","mapDispathToProps","dispatch","questions","mapStateToProps","loading","questionNumber","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { func, arrayOf, objectOf, bool, number } from 'prop-types';\nimport Header from '../components/Header/Header';\nimport fetchQuestions from '../fetchs/fetchQuestions';\nimport QuestionCategory from '../components/Question/QuestionCategory';\nimport QuestionText from '../components/Question/QuestionText';\nimport QuestionAnswers from '../components/Question/QuestionAnswers';\nimport { setAnsweredTrue } from '../actions';\n\nclass GameScreen extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30,\n    };\n\n    this.countdown = this.countdown.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const { dispatchQuestions } = this.props;\n    dispatchQuestions();\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    // const { state } = this;\n    const numb = 0;\n    const { answered } = this.props;\n    if (answered === true) clearInterval(this.interval);\n    console.log(numb + 1);\n    // if (state.timer === 0) {\n    //   clearInterval(this.interval);\n    //   answeredTrue();\n  }\n\n  countdown() {\n    const { state } = this;\n    const { timer } = this.state;\n    const { answeredTrue } = this.props;\n    if (state.timer === 1) {\n      clearInterval(this.interval);\n      answeredTrue();\n    }\n    this.setState({\n      timer: timer - 1,\n    });\n  }\n\n  startTimer() {\n    const { timer } = this.state;\n    const start = 30;\n    if (timer !== start) {\n      this.setState({\n        timer: 30,\n      });\n    }\n    const setTimer = 1000;\n    this.interval = setInterval(this.countdown, setTimer);\n  }\n\n  render() {\n    const { getQuestions, getLoading, getQuestionNumber } = this.props;\n    const { timer } = this.state;\n    if (getLoading) return <p>Loading...</p>;\n    return (\n      <div>\n        <Header timer={ timer } />\n        <QuestionCategory\n          category={ getQuestions[getQuestionNumber].category }\n        />\n        <QuestionText\n          question={ getQuestions[getQuestionNumber].question }\n        />\n        <QuestionAnswers\n          startTimer={ this.startTimer }\n          type={ getQuestions[getQuestionNumber].type }\n          correctAnswer={ getQuestions[getQuestionNumber].correct_answer }\n          wrongAnswers={ getQuestions[getQuestionNumber].incorrect_answers }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispathToProps = (dispatch) => ({\n  dispatchQuestions: (questions) => (dispatch(fetchQuestions(questions))),\n  answeredTrue: () => dispatch(setAnsweredTrue()),\n});\n\nconst mapStateToProps = ({ questions }) => ({\n  getQuestions: questions.questions,\n  getLoading: questions.loading,\n  getQuestionNumber: questions.questionNumber,\n  answered: questions.answered,\n});\n\nGameScreen.propTypes = {\n  dispatchQuestions: func.isRequired,\n  getQuestions: arrayOf(objectOf).isRequired,\n  getLoading: bool.isRequired,\n  getQuestionNumber: number.isRequired,\n  answered: bool.isRequired,\n  answeredTrue: func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(GameScreen);\n"]},"metadata":{},"sourceType":"module"}