{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/Feedback.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, objectOf, number, func, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Feed, Hits, TotalScore } from '../components/Feedback';\nimport { PlayerImg, PlayerName, Score } from '../components/Header';\nimport { setReset } from '../actions'; // import saveRankLocalStorage from '../functions/saveRankLocalStorage';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.goHome = this.goHome.bind(this);\n    this.goRanking = this.goRanking.bind(this);\n  }\n\n  goHome() {\n    const _this$props = this.props,\n          reset = _this$props.reset,\n          history = _this$props.history;\n    reset();\n    history.push('/');\n  }\n\n  goRanking() {\n    const history = this.props.history; // saveRankLocalStorage();\n\n    history.push('/ranking');\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          getQuestions = _this$props2.getQuestions,\n          getAssertions = _this$props2.getAssertions,\n          getScore = _this$props2.getScore;\n    const assertions = getAssertions;\n    const totalScore = getScore;\n    const qntQuestions = getQuestions.length;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Feedback\"), React.createElement(PlayerImg, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(PlayerName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Score, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Feed, {\n      assertions: assertions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(TotalScore, {\n      totalScore: totalScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(Hits, {\n      assertions: assertions,\n      qntQuestions: qntQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.goHome,\n      testId: \"btn-play-again\",\n      label: \"Jogar novamente\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.goRanking,\n      testId: \"btn-ranking\",\n      label: \"Ver Ranking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = ({\n  questions\n}) => ({\n  getQuestions: questions.questions,\n  answered: questions.answered,\n  getScore: questions.score,\n  getAssertions: questions.assertions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  reset: () => dispatch(setReset())\n});\n\nFeedback.propTypes = {\n  getQuestions: arrayOf(objectOf).isRequired,\n  getScore: number.isRequired,\n  getAssertions: number.isRequired,\n  history: shape({\n    push: func\n  }).isRequired,\n  reset: func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/trivia/sd-012-project-trivia-react-redux/src/pages/Feedback.js"],"names":["React","Component","arrayOf","objectOf","number","func","shape","connect","Button","Feed","Hits","TotalScore","PlayerImg","PlayerName","Score","setReset","Feedback","constructor","props","goHome","bind","goRanking","reset","history","push","render","getQuestions","getAssertions","getScore","assertions","totalScore","qntQuestions","length","mapStateToProps","questions","answered","score","mapDispatchToProps","dispatch","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { arrayOf, objectOf, number, func, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Feed, Hits, TotalScore } from '../components/Feedback';\nimport { PlayerImg, PlayerName, Score } from '../components/Header';\nimport { setReset } from '../actions';\n// import saveRankLocalStorage from '../functions/saveRankLocalStorage';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.goHome = this.goHome.bind(this);\n    this.goRanking = this.goRanking.bind(this);\n  }\n\n  goHome() {\n    const { reset, history } = this.props;\n    reset();\n    history.push('/');\n  }\n\n  goRanking() {\n    const { history } = this.props;\n    // saveRankLocalStorage();\n    history.push('/ranking');\n  }\n\n  render() {\n    const { getQuestions, getAssertions, getScore } = this.props;\n    const assertions = getAssertions;\n    const totalScore = getScore;\n    const qntQuestions = getQuestions.length;\n    return (\n      <div>\n        <header>\n          <h1>Feedback</h1>\n          <PlayerImg />\n          <PlayerName />\n          <Score />\n        </header>\n        <main>\n          <Feed\n            assertions={ assertions }\n          />\n          <TotalScore\n            totalScore={ totalScore }\n          />\n          <Hits\n            assertions={ assertions }\n            qntQuestions={ qntQuestions }\n          />\n          <Button\n            onClick={ this.goHome }\n            testId=\"btn-play-again\"\n            label=\"Jogar novamente\"\n          />\n          <Button\n            onClick={ this.goRanking }\n            testId=\"btn-ranking\"\n            label=\"Ver Ranking\"\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ questions }) => ({\n  getQuestions: questions.questions,\n  answered: questions.answered,\n  getScore: questions.score,\n  getAssertions: questions.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(setReset()),\n});\n\nFeedback.propTypes = {\n  getQuestions: arrayOf(objectOf).isRequired,\n  getScore: number.isRequired,\n  getAssertions: number.isRequired,\n  history: shape({\n    push: func,\n  }).isRequired,\n  reset: func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}