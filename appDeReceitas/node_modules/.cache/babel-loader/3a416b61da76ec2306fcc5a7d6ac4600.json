{"ast":null,"code":"export const fetchItem = async () => {};\nexport const ingredientsMeasuresFunc = obj => {\n  const objKey = Object.keys(obj);\n  const objEntries = Object.entries(obj[objKey][0]);\n  const objEntriesIngredient = objEntries.filter(entry => entry[0].includes('strIngredient') && entry[1]).map(entryI => entryI[1]);\n  const objEntriesMeasure = objEntries.filter(entry => entry[0].includes('strMeasure') && entry[1]).map(entryI => entryI[1]);\n  const entriesIngredientArrays = objEntriesIngredient.map((ingredient, index) => `${ingredient} - ${objEntriesMeasure[index]}`);\n  return entriesIngredientArrays;\n};\nexport default ingredientsMeasuresFunc;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/appDeReceitas/sd-012-project-recipes-app/src/pages/foodProcess/utils.js"],"names":["fetchItem","ingredientsMeasuresFunc","obj","objKey","Object","keys","objEntries","entries","objEntriesIngredient","filter","entry","includes","map","entryI","objEntriesMeasure","entriesIngredientArrays","ingredient","index"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,YAAY,CAEpC,CAFM;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,GAAD,IAAS;AAC9C,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAf;AACA,QAAMI,UAAU,GAAGF,MAAM,CAACG,OAAP,CAAeL,GAAG,CAACC,MAAD,CAAH,CAAY,CAAZ,CAAf,CAAnB;AAEA,QAAMK,oBAAoB,GAAGF,UAAU,CAACG,MAAX,CAAmBC,KAAD,IAC7CA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,eAAlB,KAAsCD,KAAK,CAAC,CAAD,CADhB,EAE1BE,GAF0B,CAErBC,MAAD,IAAYA,MAAM,CAAC,CAAD,CAFI,CAA7B;AAIA,QAAMC,iBAAiB,GAAGR,UAAU,CAACG,MAAX,CAAmBC,KAAD,IAC1CA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,YAAlB,KAAmCD,KAAK,CAAC,CAAD,CADhB,EAEvBE,GAFuB,CAElBC,MAAD,IAAYA,MAAM,CAAC,CAAD,CAFC,CAA1B;AAIA,QAAME,uBAAuB,GAAGP,oBAAoB,CAACI,GAArB,CAAyB,CAACI,UAAD,EAAaC,KAAb,KACtD,GAAED,UAAW,MAAKF,iBAAiB,CAACG,KAAD,CAAQ,EADd,CAAhC;AAIA,SAAOF,uBAAP;AACD,CAjBM;AAmBP,eAAed,uBAAf","sourcesContent":["export const fetchItem = async () => {\n  \n}\n\nexport const ingredientsMeasuresFunc = (obj) => {\n  const objKey = Object.keys(obj);\n  const objEntries = Object.entries(obj[objKey][0]);\n\n  const objEntriesIngredient = objEntries.filter((entry) => (\n    entry[0].includes('strIngredient') && entry[1]))\n    .map((entryI) => entryI[1]);\n\n  const objEntriesMeasure = objEntries.filter((entry) => (\n    entry[0].includes('strMeasure') && entry[1]))\n    .map((entryI) => entryI[1]);\n\n  const entriesIngredientArrays = objEntriesIngredient.map((ingredient, index) => (\n    `${ingredient} - ${objEntriesMeasure[index]}`\n  ));\n\n  return entriesIngredientArrays;\n};\n\nexport default ingredientsMeasuresFunc;\n"]},"metadata":{},"sourceType":"module"}