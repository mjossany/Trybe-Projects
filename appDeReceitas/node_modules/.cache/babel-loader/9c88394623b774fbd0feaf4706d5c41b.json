{"ast":null,"code":"export const ingredientsMeasuresFunc = obj => {\n  const objKey = Object.keys(obj);\n  const objEntries = Object.entries(obj[objKey][0]);\n  const objEntriesIngredient = objEntries.filter(entry => entry[0].includes('strIngredient') && entry[1] !== \"\").map(array => array[1]);\n  const objEntriesMeasure = objEntries.filter(entry => entry[0].includes('strMeasure') && entry[1] !== \" \").map(array => array[1]);\n  const paresArray = objEntriesIngredient.map((ingredient, index) => [ingredient, objEntriesMeasure[index]]);\n  console.log(paresArray);\n  return objEntriesIngredient;\n};","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/appDeReceitas/sd-012-project-recipes-app/src/pages/foodProcess/utils.js"],"names":["ingredientsMeasuresFunc","obj","objKey","Object","keys","objEntries","entries","objEntriesIngredient","filter","entry","includes","map","array","objEntriesMeasure","paresArray","ingredient","index","console","log"],"mappings":"AAAA,OAAO,MAAMA,uBAAuB,GAAIC,GAAD,IAAS;AAC9C,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAf;AACA,QAAMI,UAAU,GAAGF,MAAM,CAACG,OAAP,CAAeL,GAAG,CAACC,MAAD,CAAH,CAAY,CAAZ,CAAf,CAAnB;AAEA,QAAMK,oBAAoB,GAAGF,UAAU,CAACG,MAAX,CAAmBC,KAAD,IAC7CA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,eAAlB,KAAsCD,KAAK,CAAC,CAAD,CAAL,KAAa,EADxB,EAExBE,GAFwB,CAEnBC,KAAD,IAAWA,KAAK,CAAC,CAAD,CAFI,CAA7B;AAIA,QAAMC,iBAAiB,GAAGR,UAAU,CAACG,MAAX,CAAmBC,KAAD,IAC1CA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,YAAlB,KAAmCD,KAAK,CAAC,CAAD,CAAL,KAAa,GADxB,EAErBE,GAFqB,CAEhBC,KAAD,IAAWA,KAAK,CAAC,CAAD,CAFC,CAA1B;AAIA,QAAME,UAAU,GAAGP,oBAAoB,CAACI,GAArB,CAAyB,CAACI,UAAD,EAAaC,KAAb,KAAuB,CAACD,UAAD,EAAaF,iBAAiB,CAACG,KAAD,CAA9B,CAAhD,CAAnB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,SAAOP,oBAAP;AACD,CAjBM","sourcesContent":["export const ingredientsMeasuresFunc = (obj) => {\n  const objKey = Object.keys(obj)\n  const objEntries = Object.entries(obj[objKey][0]);\n\n  const objEntriesIngredient = objEntries.filter((entry) => \n    entry[0].includes('strIngredient') && entry[1] !== \"\")\n      .map((array) => array[1])\n\n  const objEntriesMeasure = objEntries.filter((entry) => \n    entry[0].includes('strMeasure') && entry[1] !== \" \")\n      .map((array) => array[1])\n\n  const paresArray = objEntriesIngredient.map((ingredient, index) => [ingredient, objEntriesMeasure[index]])\n\n  \n  console.log(paresArray);\n  return objEntriesIngredient;\n}"]},"metadata":{},"sourceType":"module"}