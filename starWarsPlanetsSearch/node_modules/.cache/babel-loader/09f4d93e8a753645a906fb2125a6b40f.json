{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport StarWarsPlanetsContext from './StarWarsPlanetsContext';\nimport useFetchData from '../hooks/useFetchData';\n\nconst Provider = ({\n  children\n}) => {\n  const options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const optionsFiltered = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const [columnAlreadyUsed, setColumnAlreadyUsed] = useState([]);\n  const [optionsFilter, setOptionsFilter] = useState(options);\n  const [optionsFilteredArray, setOptionsFilteredArray] = useState(options);\n  const [state, loading, input, setInput, column, setColumn, comparison, setComparison, numberValue, setNumberValue, setState, stateCopy, setStateCopy] = useFetchData();\n  useEffect(() => {\n    const filteredOptions = options.filter(opt => opt !== columnAlreadyUsed);\n    setOptionsFilter(filteredOptions);\n  }, [columnAlreadyUsed, options]);\n  useEffect(() => {\n    const newOptions = optionsFiltered.filter(opt => optionsFilter.includes(opt));\n    setOptionsFilteredArray(newOptions);\n  }, [optionsFilter, optionsFiltered]);\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input\n      },\n      filterByNumericValues: [{\n        column,\n        comparison,\n        numberValue\n      }]\n    },\n    optionsFilter,\n    loading,\n    setInput,\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    numberValue,\n    setNumberValue,\n    stateCopy,\n    setStateCopy,\n    columnAlreadyUsed,\n    setColumnAlreadyUsed\n  };\n  return /*#__PURE__*/React.createElement(StarWarsPlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","Proptypes","StarWarsPlanetsContext","useFetchData","Provider","children","options","optionsFiltered","columnAlreadyUsed","setColumnAlreadyUsed","optionsFilter","setOptionsFilter","optionsFilteredArray","setOptionsFilteredArray","state","loading","input","setInput","column","setColumn","comparison","setComparison","numberValue","setNumberValue","setState","stateCopy","setStateCopy","filteredOptions","filter","opt","newOptions","includes","contextValue","data","filters","filterByName","name","filterByNumericValues","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC,QAAMC,OAAO,GAAG,CACd,YADc,EACA,gBADA,EACkB,UADlB,EAC8B,iBAD9B,EACiD,eADjD,CAAhB;AAGA,QAAMC,eAAe,GAAG,CACtB,YADsB,EACR,gBADQ,EACU,UADV,EACsB,iBADtB,EACyC,eADzC,CAAxB;AAGA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAACO,OAAD,CAAlD;AACA,QAAM,CAACM,oBAAD,EAAuBC,uBAAvB,IAAkDd,QAAQ,CAACO,OAAD,CAAhE;AAEA,QAAM,CACJQ,KADI,EACGC,OADH,EACYC,KADZ,EACmBC,QADnB,EAEJC,MAFI,EAEIC,SAFJ,EAEeC,UAFf,EAE2BC,aAF3B,EAGJC,WAHI,EAGSC,cAHT,EAGyBC,QAHzB,EAGmCC,SAHnC,EAG8CC,YAH9C,IAIFvB,YAAY,EAJhB;AAMAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,eAAe,GAAGrB,OAAO,CAACsB,MAAR,CAAgBC,GAAD,IACrCA,GAAG,KAAKrB,iBADc,CAAxB;AAGAG,IAAAA,gBAAgB,CAACgB,eAAD,CAAhB;AACD,GALQ,EAKN,CAACnB,iBAAD,EAAoBF,OAApB,CALM,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,UAAU,GAAGvB,eAAe,CAACqB,MAAhB,CAAwBC,GAAD,IAASnB,aAAa,CAACqB,QAAd,CAAuBF,GAAvB,CAAhC,CAAnB;AACAhB,IAAAA,uBAAuB,CAACiB,UAAD,CAAvB;AACD,GAHQ,EAGN,CAACpB,aAAD,EAAgBH,eAAhB,CAHM,CAAT;AAKA,QAAMyB,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAEnB,KADa;AAEnBU,IAAAA,QAFmB;AAGnBU,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAEpB;AADM,OADP;AAIPqB,MAAAA,qBAAqB,EAAE,CACrB;AACEnB,QAAAA,MADF;AAEEE,QAAAA,UAFF;AAGEE,QAAAA;AAHF,OADqB;AAJhB,KAHU;AAenBZ,IAAAA,aAfmB;AAgBnBK,IAAAA,OAhBmB;AAiBnBE,IAAAA,QAjBmB;AAkBnBC,IAAAA,MAlBmB;AAmBnBC,IAAAA,SAnBmB;AAoBnBC,IAAAA,UApBmB;AAqBnBC,IAAAA,aArBmB;AAsBnBC,IAAAA,WAtBmB;AAuBnBC,IAAAA,cAvBmB;AAwBnBE,IAAAA,SAxBmB;AAyBnBC,IAAAA,YAzBmB;AA0BnBlB,IAAAA,iBA1BmB;AA2BnBC,IAAAA;AA3BmB,GAArB;AA8BA,sBACE,oBAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAGuB,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,QADH,CADF;AAKD,CAhED;;AAkEAD,QAAQ,CAACkC,SAAT,GAAqB;AACnBjC,EAAAA,QAAQ,EAAEJ,SAAS,CAACsC,IAAV,CAAeC;AADN,CAArB;AAIA,eAAepC,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport StarWarsPlanetsContext from './StarWarsPlanetsContext';\nimport useFetchData from '../hooks/useFetchData';\n\nconst Provider = ({ children }) => {\n  const options = [\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water',\n  ];\n  const optionsFiltered = [\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water',\n  ];\n  const [columnAlreadyUsed, setColumnAlreadyUsed] = useState([]);\n  const [optionsFilter, setOptionsFilter] = useState(options);\n  const [optionsFilteredArray, setOptionsFilteredArray] = useState(options);\n\n  const [\n    state, loading, input, setInput,\n    column, setColumn, comparison, setComparison,\n    numberValue, setNumberValue, setState, stateCopy, setStateCopy,\n  ] = useFetchData();\n\n  useEffect(() => {\n    const filteredOptions = options.filter((opt) => (\n      opt !== columnAlreadyUsed\n    ));\n    setOptionsFilter(filteredOptions);\n  }, [columnAlreadyUsed, options]);\n\n  useEffect(() => {\n    const newOptions = optionsFiltered.filter((opt) => optionsFilter.includes(opt));\n    setOptionsFilteredArray(newOptions);\n  }, [optionsFilter, optionsFiltered]);\n\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input,\n      },\n      filterByNumericValues: [\n        {\n          column,\n          comparison,\n          numberValue,\n        },\n      ],\n    },\n    optionsFilter,\n    loading,\n    setInput,\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    numberValue,\n    setNumberValue,\n    stateCopy,\n    setStateCopy,\n    columnAlreadyUsed,\n    setColumnAlreadyUsed,\n  };\n\n  return (\n    <StarWarsPlanetsContext.Provider value={ contextValue }>\n      {children}\n    </StarWarsPlanetsContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}