{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport Context from './Context';\n\nconst Provider = ({\n  children\n}) => {\n  const [state, setState] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [input, setInput] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const {\n        results\n      } = resultJson;\n      setState(results);\n      setLoading(false);\n    };\n\n    getPlanets();\n  }, []);\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input\n      },\n      filterByNumericValues\n    },\n    loading,\n    setInput,\n    filterByNumericValues,\n    setFilterByNumericValues\n  };\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","Proptypes","Context","Provider","children","state","setState","loading","setLoading","input","setInput","filterByNumericValues","setFilterByNumericValues","getPlanets","endPoint","result","fetch","resultJson","json","results","contextValue","data","filters","filterByName","name","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,qBAAD,EAAwBC,wBAAxB,IAAoDb,QAAQ,CAAC,EAAD,CAAlE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,gDAAjB;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B;AACA,YAAMG,UAAU,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAzB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAcF,UAApB;AACAX,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAPD;;AASAK,IAAAA,UAAU;AACX,GAXQ,EAWN,EAXM,CAAT;AAaA,QAAMO,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAEhB,KADa;AAEnBC,IAAAA,QAFmB;AAGnBgB,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAEf;AADM,OADP;AAIPE,MAAAA;AAJO,KAHU;AASnBJ,IAAAA,OATmB;AAUnBG,IAAAA,QAVmB;AAWnBC,IAAAA,qBAXmB;AAYnBC,IAAAA;AAZmB,GAArB;AAeA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAGQ,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,QADH,CADF;AAKD,CAvCD;;AAyCAD,QAAQ,CAACsB,SAAT,GAAqB;AACnBrB,EAAAA,QAAQ,EAAEH,SAAS,CAACyB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAexB,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport Context from './Context';\n\nconst Provider = ({ children }) => {\n  const [state, setState] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [input, setInput] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const { results } = resultJson;\n      setState(results);\n      setLoading(false);\n    };\n\n    getPlanets();\n  }, []);\n\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input,\n      },\n      filterByNumericValues,\n    },\n    loading,\n    setInput,\n    filterByNumericValues,\n    setFilterByNumericValues,\n  };\n\n  return (\n    <Context.Provider value={ contextValue }>\n      {children}\n    </Context.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}