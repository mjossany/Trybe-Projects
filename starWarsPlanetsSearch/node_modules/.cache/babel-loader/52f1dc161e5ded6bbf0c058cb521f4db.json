{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/components/DisplayScreen/Table/Table.jsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Context from '../../../context/Context';\n\nconst Table = () => {\n  const {\n    data,\n    filters: {\n      filterByName: {\n        name\n      },\n      filterByNumericValue\n    },\n    loading\n  } = useContext(Context);\n  const [dataToBeUsed, setDataToBeUsed] = useState([]);\n\n  const filterByName = planets => {\n    if (planets.length > 0) {\n      return planets.filter(planet => planet.name.includes(name));\n    }\n\n    return planets;\n  };\n\n  const filterByValue = planets => {\n    if (filterByNumericValue.length > 0) {\n      filterByNumericValue.forEach(({\n        column,\n        comparison,\n        value\n      }) => {\n        planets = filteredData.filter(planet => switchComparison(planet, column, comparison, value));\n      });\n      return filteredData;\n    }\n  };\n\n  if (loading || data.length === 0) return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 44\n    }\n  }, \"Loading...\");\n  const keysWithoutResidents = Object.keys(data[0]).filter(key => key !== 'residents');\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, keysWithoutResidents.map(key => /*#__PURE__*/React.createElement(\"th\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 46\n    }\n  }, key)))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, data.map(planet => /*#__PURE__*/React.createElement(\"tr\", {\n    key: planet.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, keysWithoutResidents.map(key => /*#__PURE__*/React.createElement(\"td\", {\n    key: planet[key],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, planet[key]))))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/components/DisplayScreen/Table/Table.jsx"],"names":["React","useContext","useEffect","useState","Context","Table","data","filters","filterByName","name","filterByNumericValue","loading","dataToBeUsed","setDataToBeUsed","planets","length","filter","planet","includes","filterByValue","forEach","column","comparison","value","filteredData","switchComparison","keysWithoutResidents","Object","keys","key","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AAAEC,QAAAA;AAAF,OADP;AAEPC,MAAAA;AAFO,KAFL;AAMJC,IAAAA;AANI,MAOFV,UAAU,CAACG,OAAD,CAPd;AASA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMK,YAAY,GAAIM,OAAD,IAAa;AAChC,QAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAOD,OAAO,CAACE,MAAR,CAAgBC,MAAD,IAAYA,MAAM,CAACR,IAAP,CAAYS,QAAZ,CAAqBT,IAArB,CAA3B,CAAP;AACD;;AACD,WAAOK,OAAP;AACD,GALD;;AAOA,QAAMK,aAAa,GAAIL,OAAD,IAAa;AACjC,QAAIJ,oBAAoB,CAACK,MAArB,GAA8B,CAAlC,EAAqC;AACnCL,MAAAA,oBAAoB,CAACU,OAArB,CAA6B,CAAC;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,UAAV;AAAsBC,QAAAA;AAAtB,OAAD,KAAmC;AAC9DT,QAAAA,OAAO,GAAGU,YAAY,CACnBR,MADO,CACCC,MAAD,IAAYQ,gBAAgB,CAACR,MAAD,EAASI,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,CAD5B,CAAV;AAED,OAHD;AAIA,aAAOC,YAAP;AACD;AACF,GARD;;AAUA,MAAIb,OAAO,IAAIL,IAAI,CAACS,MAAL,KAAgB,CAA/B,EAAkC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAClC,QAAMW,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYtB,IAAI,CAAC,CAAD,CAAhB,EAAqBU,MAArB,CAA6Ba,GAAD,IAASA,GAAG,KAAK,WAA7C,CAA7B;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,oBAAoB,CAACI,GAArB,CAA0BD,GAAD,iBAAS;AAAI,IAAA,GAAG,EAAGA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBA,GAAlB,CAAlC,CADH,CADF,CADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,IAAI,CACFwB,GADF,CACOb,MAAD,iBACH;AAAI,IAAA,GAAG,EAAGA,MAAM,CAACR,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,oBAAoB,CAACI,GAArB,CAA0BD,GAAD,iBACxB;AAAI,IAAA,GAAG,EAAGZ,MAAM,CAACY,GAAD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MAAM,CAACY,GAAD,CADT,CADD,CADH,CAFH,CADH,CANF,CADF;AAqBD,CArDD;;AAuDA,eAAexB,KAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Context from '../../../context/Context';\n\nconst Table = () => {\n  const {\n    data,\n    filters: {\n      filterByName: { name },\n      filterByNumericValue,\n    },\n    loading,\n  } = useContext(Context);\n\n  const [dataToBeUsed, setDataToBeUsed] = useState([]);\n\n  const filterByName = (planets) => {\n    if (planets.length > 0) {\n      return planets.filter((planet) => planet.name.includes(name));\n    }\n    return planets;\n  };\n\n  const filterByValue = (planets) => {\n    if (filterByNumericValue.length > 0) {\n      filterByNumericValue.forEach(({ column, comparison, value }) => {\n        planets = filteredData\n          .filter((planet) => switchComparison(planet, column, comparison, value));\n      });\n      return filteredData;\n    }\n  }\n\n  if (loading || data.length === 0) return <h2>Loading...</h2>;\n  const keysWithoutResidents = Object.keys(data[0]).filter((key) => key !== 'residents');\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {keysWithoutResidents.map((key) => <th key={ key }>{ key }</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {data\n          .map((planet) => (\n            <tr key={ planet.name }>\n              {keysWithoutResidents.map((key) => (\n                <td key={ planet[key] }>\n                  {planet[key]}\n                </td>\n              ))}\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}