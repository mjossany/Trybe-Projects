{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport Context from './Context';\nimport { optionsColumn } from '../helper/SelectOptions';\n\nconst Provider = ({\n  children\n}) => {\n  const [state, setState] = useState([]);\n  const [input, setInput] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [columnsOptions, setColumnsOptions] = useState(optionsColumn);\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const {\n        results\n      } = resultJson;\n      setState(results);\n    };\n\n    getPlanets();\n  }, []);\n  useEffect(() => {\n    let filteredColumns = [...optionsColumn];\n    let aux = 0;\n\n    if (filterByNumericValues.length > 0) {\n      filterByNumericValues.forEach(({\n        column\n      }) => {\n        if (filterByNumericValues[4]) {\n          aux = column;\n        }\n\n        filteredColumns = filteredColumns.filter(item => item !== column);\n      });\n      setColumnsOptions(filteredColumns);\n    }\n\n    if (filterByNumericValues === 0) {\n      setColumnsOptions([...columnsOptions, aux]);\n    }\n  }, [filterByNumericValues, columnsOptions]);\n  const contextValue = {\n    data: state,\n    filters: {\n      filterByName: {\n        name: input\n      },\n      filterByNumericValues\n    },\n    setInput,\n    setFilterByNumericValues,\n    columnsOptions\n  };\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","Proptypes","Context","optionsColumn","Provider","children","state","setState","input","setInput","filterByNumericValues","setFilterByNumericValues","columnsOptions","setColumnsOptions","getPlanets","endPoint","result","fetch","resultJson","json","results","filteredColumns","aux","length","forEach","column","filter","item","contextValue","data","filters","filterByName","name","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,qBAAD,EAAwBC,wBAAxB,IAAoDZ,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAACI,aAAD,CAApD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,gDAAjB;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B;AACA,YAAMG,UAAU,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAzB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAcF,UAApB;AACAX,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACD,KAND;;AAQAN,IAAAA,UAAU;AACX,GAVQ,EAUN,EAVM,CAAT;AAYAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,eAAe,GAAG,CAAC,GAAGlB,aAAJ,CAAtB;AACA,QAAImB,GAAG,GAAG,CAAV;;AACA,QAAIZ,qBAAqB,CAACa,MAAtB,GAA+B,CAAnC,EAAsC;AACpCb,MAAAA,qBAAqB,CAACc,OAAtB,CAA8B,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgB;AAC5C,YAAIf,qBAAqB,CAAC,CAAD,CAAzB,EAA8B;AAC5BY,UAAAA,GAAG,GAAGG,MAAN;AACD;;AACDJ,QAAAA,eAAe,GAAGA,eAAe,CAACK,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,KAAKF,MAA1C,CAAlB;AACD,OALD;AAMAZ,MAAAA,iBAAiB,CAACQ,eAAD,CAAjB;AACD;;AACD,QAAIX,qBAAqB,KAAK,CAA9B,EAAiC;AAC/BG,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBU,GAApB,CAAD,CAAjB;AACD;AACF,GAfQ,EAeN,CAACZ,qBAAD,EAAwBE,cAAxB,CAfM,CAAT;AAiBA,QAAMgB,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAEvB,KADa;AAEnBwB,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAExB;AADM,OADP;AAIPE,MAAAA;AAJO,KAFU;AAQnBD,IAAAA,QARmB;AASnBE,IAAAA,wBATmB;AAUnBC,IAAAA;AAVmB,GAArB;AAaA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAGgB,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,QADH,CADF;AAKD,CArDD;;AAuDAD,QAAQ,CAAC6B,SAAT,GAAqB;AACnB5B,EAAAA,QAAQ,EAAEJ,SAAS,CAACiC,IAAV,CAAeC;AADN,CAArB;AAIA,eAAe/B,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport Context from './Context';\nimport { optionsColumn } from '../helper/SelectOptions';\n\nconst Provider = ({ children }) => {\n  const [state, setState] = useState([]);\n  const [input, setInput] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [columnsOptions, setColumnsOptions] = useState(optionsColumn);\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const { results } = resultJson;\n      setState(results);\n    };\n\n    getPlanets();\n  }, []);\n\n  useEffect(() => {\n    let filteredColumns = [...optionsColumn];\n    let aux = 0;\n    if (filterByNumericValues.length > 0) {\n      filterByNumericValues.forEach(({ column }) => {\n        if (filterByNumericValues[4]) {\n          aux = column;\n        }\n        filteredColumns = filteredColumns.filter((item) => item !== column);\n      });\n      setColumnsOptions(filteredColumns);\n    }\n    if (filterByNumericValues === 0) {\n      setColumnsOptions([...columnsOptions, aux]);\n    }\n  }, [filterByNumericValues, columnsOptions]);\n\n  const contextValue = {\n    data: state,\n    filters: {\n      filterByName: {\n        name: input,\n      },\n      filterByNumericValues,\n    },\n    setInput,\n    setFilterByNumericValues,\n    columnsOptions,\n  };\n\n  return (\n    <Context.Provider value={ contextValue }>\n      {children}\n    </Context.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}