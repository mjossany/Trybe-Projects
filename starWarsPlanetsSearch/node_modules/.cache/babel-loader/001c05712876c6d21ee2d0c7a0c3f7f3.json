{"ast":null,"code":"var _jsxFileName = \"/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport StarWarsPlanetsContext from './Context';\n\nconst Provider = ({\n  children\n}) => {\n  const options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const [state, setState] = useState([]);\n  const [stateCopy, setStateCopy] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [columnAlreadyUsed, setColumnAlreadyUsed] = useState([]);\n  const [optionsFilter] = useState(options);\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const {\n        results\n      } = resultJson;\n      setState(results);\n      setStateCopy(results);\n      setLoading(false);\n    };\n\n    getPlanets();\n  }, []);\n  useEffect(() => {\n    const filteredPlanets = stateCopy.filter(planet => planet.name.includes(input));\n    setState(filteredPlanets);\n  }, [input, stateCopy]);\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input\n      },\n      filterByNumericValues: [{\n        column,\n        comparison,\n        numberValue\n      }]\n    },\n    optionsFilter,\n    loading,\n    setInput,\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    numberValue,\n    setNumberValue,\n    stateCopy,\n    setStateCopy,\n    columnAlreadyUsed,\n    setColumnAlreadyUsed\n  };\n  return /*#__PURE__*/React.createElement(StarWarsPlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/jossanymoura/Dev/projetos/starWarsPlanetsSearch/sd-012-project-starwars-planets-search/src/context/Provider.jsx"],"names":["React","useState","useEffect","Proptypes","StarWarsPlanetsContext","Provider","children","options","state","setState","stateCopy","setStateCopy","loading","setLoading","columnAlreadyUsed","setColumnAlreadyUsed","optionsFilter","getPlanets","endPoint","result","fetch","resultJson","json","results","filteredPlanets","filter","planet","name","includes","input","contextValue","data","filters","filterByName","filterByNumericValues","column","comparison","numberValue","setInput","setColumn","setComparison","setNumberValue","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,sBAAP,MAAmC,WAAnC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC,QAAMC,OAAO,GAAG,CACd,YADc,EACA,gBADA,EACkB,UADlB,EAC8B,iBAD9B,EACiD,eADjD,CAAhB;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACe,aAAD,IAAkBf,QAAQ,CAACM,OAAD,CAAhC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,gDAAjB;AACA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACF,QAAD,CAA1B;AACA,YAAMG,UAAU,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAzB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAcF,UAApB;AACAZ,MAAAA,QAAQ,CAACc,OAAD,CAAR;AACAZ,MAAAA,YAAY,CAACY,OAAD,CAAZ;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KARD;;AAUAI,IAAAA,UAAU;AACX,GAZQ,EAYN,EAZM,CAAT;AAcAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,eAAe,GAAGd,SAAS,CAACe,MAAV,CAAkBC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,KAArB,CAA7B,CAAxB;AACApB,IAAAA,QAAQ,CAACe,eAAD,CAAR;AACD,GAHQ,EAGN,CAACK,KAAD,EAAQnB,SAAR,CAHM,CAAT;AAKA,QAAMoB,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAEvB,KADa;AAEnBC,IAAAA,QAFmB;AAGnBuB,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAE;AACZN,QAAAA,IAAI,EAAEE;AADM,OADP;AAIPK,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MADF;AAEEC,QAAAA,UAFF;AAGEC,QAAAA;AAHF,OADqB;AAJhB,KAHU;AAenBrB,IAAAA,aAfmB;AAgBnBJ,IAAAA,OAhBmB;AAiBnB0B,IAAAA,QAjBmB;AAkBnBH,IAAAA,MAlBmB;AAmBnBI,IAAAA,SAnBmB;AAoBnBH,IAAAA,UApBmB;AAqBnBI,IAAAA,aArBmB;AAsBnBH,IAAAA,WAtBmB;AAuBnBI,IAAAA,cAvBmB;AAwBnB/B,IAAAA,SAxBmB;AAyBnBC,IAAAA,YAzBmB;AA0BnBG,IAAAA,iBA1BmB;AA2BnBC,IAAAA;AA3BmB,GAArB;AA8BA,sBACE,oBAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAGe,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,QADH,CADF;AAKD,CAjED;;AAmEAD,QAAQ,CAACqC,SAAT,GAAqB;AACnBpC,EAAAA,QAAQ,EAAEH,SAAS,CAACwC,IAAV,CAAeC;AADN,CAArB;AAIA,eAAevC,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport StarWarsPlanetsContext from './Context';\n\nconst Provider = ({ children }) => {\n  const options = [\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water',\n  ];\n\n  const [state, setState] = useState([]);\n  const [stateCopy, setStateCopy] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [columnAlreadyUsed, setColumnAlreadyUsed] = useState([]);\n  const [optionsFilter] = useState(options);\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const result = await fetch(endPoint);\n      const resultJson = await result.json();\n      const { results } = resultJson;\n      setState(results);\n      setStateCopy(results);\n      setLoading(false);\n    };\n\n    getPlanets();\n  }, []);\n\n  useEffect(() => {\n    const filteredPlanets = stateCopy.filter((planet) => planet.name.includes(input));\n    setState(filteredPlanets);\n  }, [input, stateCopy]);\n\n  const contextValue = {\n    data: state,\n    setState,\n    filters: {\n      filterByName: {\n        name: input,\n      },\n      filterByNumericValues: [\n        {\n          column,\n          comparison,\n          numberValue,\n        },\n      ],\n    },\n    optionsFilter,\n    loading,\n    setInput,\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    numberValue,\n    setNumberValue,\n    stateCopy,\n    setStateCopy,\n    columnAlreadyUsed,\n    setColumnAlreadyUsed,\n  };\n\n  return (\n    <StarWarsPlanetsContext.Provider value={ contextValue }>\n      {children}\n    </StarWarsPlanetsContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: Proptypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}